---

# todo: solution for 'ct state new => log' rules as they are commonly used
# todo: solution for anti-lockout => rollback opt-in or extended config-validation (?)

- name: NFTables | Checking config
  ansible.builtin.assert:
    that:
      - nftables is defined
      - nftables.tables is defined
      - NFT_CONFIG.tables | length > 0
      - NFT_CONFIG.tables[NFT_CONFIG.tables | list | first]['chains'] | default([]) | length > 0
      - not NFT_CONFIG.ext.startswith('.')
  tags: [config, purge]

- name: NFTables | Pulling info on installed packages
  ansible.builtin.package_facts:
    manager: auto
  ignore_errors: true
  register: nft_packages
  tags: config

- name: "NFTables | Failing if incompatible packages are installed ({{ NFT_CONFIG.incompatible_packages | join(', ') }})"
  ansible.builtin.assert:
    that:
      - ansible_facts.packages | intersect(NFT_CONFIG.incompatible_packages) | length == 0
  when:
    - nft_packages.failed is undefined or not nft_packages.failed
    - "'packages' in ansible_facts"
  tags: config

- name: NFTables | Checking system
  ansible.builtin.import_tasks: check_debian.yml
  when: ansible_os_family | lower == 'debian'

- name: NFTables | Debian 10 Installation
  ansible.builtin.import_tasks: debian10.yml
  when:
    - NFT_CONFIG.enable.deb11_backport | bool
    - ansible_os_family | lower == 'debian'
    - ansible_distribution_major_version == '10'

- name: NFTables | Installing
  ansible.builtin.package:
    name: ['nftables']
    state: present

- name: NFTables | Adding systemd-override directory
  ansible.builtin.file:
    state: directory
    path: '/etc/systemd/system/nftables.service.d'
    mode: 0755
    owner: 'root'
    group: 'root'

- name: NFTables | Copying systemd-override
  ansible.builtin.template:
    src: "templates/etc/systemd/system/nftables.service.d/override.conf.j2"
    dest: '/etc/systemd/system/nftables.service.d/override.conf'
    mode: 0644
    owner: 'root'
    group: 'root'
  register: nft_svc_override

- name: NFTables | Loading systemd-override
  ansible.builtin.systemd:
    daemon_reload: true
    name: 'nftables.service'
    state: restarted
  when: nft_svc_override.changed

- name: NFTables | Adding config directory
  ansible.builtin.file:
    state: directory
    path: "{{ NFT_CONFIG.path.config_dir }}"
    mode: 0750
    owner: 'root'
    group: 'root'

- name: NFTables | Copying base config
  ansible.builtin.template:
    src: "templates{{ NFT_CONFIG.path.config_file }}.j2"
    dest: "{{ NFT_CONFIG.path.config_file }}"
    mode: 0640
    owner: 'root'
    group: 'root'
    validate: 'nft -cf %s'
  notify: Reload-nftables
  register: nft_config_base
  ignore_errors: true

- name: NFTables | Copying base config for debugging (/tmp/nftables.nft)
  ansible.builtin.template:
    src: "templates{{ NFT_CONFIG.path.config_file }}.j2"
    dest: '/tmp/nftables.nft'
    mode: 0640
    owner: 'root'
    group: 'root'
  when:
    - nft_config_base.failed is defined
    - nft_config_base.failed
  tags: config

- name: NFTables | Failing
  ansible.builtin.fail:
    msg: 'Base config is invalid!'
  when:
    - nft_config_base.failed is defined
    - nft_config_base.failed

- name: NFTables | Checking for existing config-files
  ansible.builtin.command: "ls {{ NFT_CONFIG.path.config_dir }}"
  register: nft_config_files
  changed_when: false
  when: NFT_CONFIG.purge_orphaned | bool
  tags: [config, purge]

- name: NFTables | Purging unmanaged config-files
  ansible.builtin.file:
    path: "{{ NFT_CONFIG.path.config_dir }}/{{ item }}"
    state: absent
  when:
    - NFT_CONFIG.purge_orphaned | bool
    - item | split('.') | first not in NFT_CONFIG.tables
  loop: "{{ nft_config_files.stdout_lines }}"
  tags: [config, purge]

- name: NFTables | Tables
  ansible.builtin.include_tasks: table.yml
  vars:
    nft_table_name: "{{ nft_table_item.key | nftables_safe_name }}"
    nft_table: "{{ defaults_table |
    combine(NFT_CONFIG._defaults.table, recursive=true) |
    combine(nft_table_item.value, recursive=true) }}"
  loop_control:
    loop_var: nft_table_item
  with_dict: "{{ NFT_CONFIG.tables }}"
  no_log: true  # less verbose output
  tags: config
  args:
    apply:
      tags: config

- name: NFTables | Installing bash-completion
  ansible.builtin.package:
    name: 'bash-completion'
    state: present
  when: NFT_CONFIG.enable.bash_completion | bool

- name: NFTables | Adding bash-completion
  ansible.builtin.copy:
    src: 'files/usr/share/bash-completion/completions/nft'
    dest: '/usr/share/bash-completion/completions/nft'
    mode: 0644
    owner: 'root'
    group: 'root'
  when: NFT_CONFIG.enable.bash_completion | bool

- name: NFTables | Enabling bash-completion (for root in bashrc)
  ansible.builtin.blockinfile:
    path: '/root/.bashrc'
    block: |
      # enable bash completion in interactive shells
      if ! shopt -oq posix; then
        if [ -f /usr/share/bash-completion/bash_completion ]; then
          . /usr/share/bash-completion/bash_completion
        elif [ -f /etc/bash_completion ]; then
          . /etc/bash_completion
        fi
      fi
    marker: "# {mark} ansibleguy.infra_nftables bash-completion"
    state: present
  when: NFT_CONFIG.enable.bash_completion | bool

- name: NFTables | Disabling bash-completion (for root in bashrc)
  ansible.builtin.blockinfile:
    path: '/root/.bashrc'
    marker: "# {mark} ansibleguy.infra_nftables bash-completion"
    state: absent
  when: not NFT_CONFIG.enable.bash_completion | bool

- name: NFTables | Enabling/Starting service
  ansible.builtin.service:
    name: 'nftables'
    enabled: true
    state: started
